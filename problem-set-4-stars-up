Problem Set 1: 4 starts and up

Coderbyte

// 1. Letter Changes (Difficulty ****)
Replace every letter in the string with the letter following it in the alphabet (ie. c becomes d, z becomes a).
Then capitalize every vowel in this new string (a, e, i, o, u) and finally return this modified string.
==============================================================================================================
var letterChanges = function(str) {
	var alpha = 'abcdefghijklmnopqrstuvwxyz';
	var vowel = 'aeiou';
	var result = '';
	// myStr = str.toLowerCase().split(''); This part was missing

	for (var i = 0; i < str.length; i++) {
		if (str[i].toLowerCase() === 'z') {
			result += 'A';
		} else if (alpha.indexOf(str[i]) != -1) {
			if (vowel.indexOf(alpha[alpha.indexOf(str[i]) + 1]) != -1) {
				result += alpha[alpha.indexOf(str[i]) + 1].toUpperCase();
			} else {
				result += alpha[alpha.indexOf(str[i]) + 1];
			}
		} else {
			result += str[i];
		}
	}

	return result;
};

// Time: 14 min
// Expected result: letterChanges("Argument goes here") // -> "bshvnfOU hpft Ifsf"
// Actual result  : letterChanges("Argument goes here") // -> "AshvnfOU hpft Ifsf"
// Do I know it?: Almost
// Why was it wrong?: I did not change the argument 'str' to lowercase before everything.


// 2. Array Addition I (Difficulty *****)
ArrayAdditionI(arr) take the array of numbers stored in arr and return the string true if any combination of 
numbers in the array can be added up to equal the largest number in the array, otherwise return the string
false. For example: if arr contains [4, 6, 23, 10, 1, 3] the output should return true because
4 + 6 + 10 + 3 = 23. The array will not be empty, will not contain all the same elements, and may contain
negative numbers.
==============================================================================================================
var arrayAddition = function(array) {
	var myArr = array.slice().sort(function(a, b){ return a - b; }); // adding .pop() will become largest.
	var largest = myArr.shift(); // this is getting the smallest. 

	var recursion = function recursion(target, array) {
		if (array.length === 0) {
			return target === 0;
		} else {
			var deduct = array.shift(); // wrong it should have been -> array[0];
			// array = array.slice(1); // is missing
			return recursion(target - deduct, array) || recursion(target, array);
		}
	};

	return recursion(largest, myArr); // should be returned otherwise the whole 'arrayAddition' will return 'undefined'
};

// Time: 8 min
// Expected result: arrayAddition([4, 6, 23, 10, 1, 3]) // -> true
// Actual result  : arrayAddition([4, 6, 23, 10, 1, 3]) // -> undefined
// Do I know it?: No
// Why was it wrong?: largest is set to be smallest. It should have been using 'pop()' instead of 'shift()'.
// I did not set 'array = array.slice(1)' for every recursion which is a must for this problem. Also,
// a variable that is deducted from the target value for the recursion should just set its value by just
// assigning it to be the first of the array element. 'var n = array[0]' Array reducing is handled by
// 'array = array.slice(1)' from the above. Lastly, the recursion() should be returned.

// 3. Letter Count I (Difficulty ****)
LetterCountI(str) take the str parameter being passed and return the first word with the greatest number of 
repeated letters. For example: "Today, is the greatest day ever!" should return greatest because it has 2 e`s
(and 2 t`s) and it comes before ever which also has 2 e`s. If there are no words with repeating letters
return -1. Words will be separated by spaces. 
==============================================================================================================
var letterCount = function(str) { //=> "Today, is the greatest day ever!"

  var copy = str.split(' ').slice(); //=> [ 'Today,', 'is', 'the', 'greatest', 'day', 'ever!' ]
  var myArr = copy.slice();          //=> [ 'Today,', 'is', 'the', 'greatest', 'day', 'ever!' ]
  var max = 0;   // Must be initiated with 0
  var count = 0; // Must be initiated with 0
  var theIndex;
  var word;

  for (var i = 0; i < myArr.length; i++) {
    word = myArr[i].split('').sort(); //=> [ ',', 'T', 'a', 'd', 'o', 'y' ]
    for (var j = 0; j < word.length - 1; j++) {
      if (word[j] === word[j + 1]) {
        count++;
      }
    }
    if (count > max) {
      max = count;
      theIndex = i;
      count = 0;
    }
  }
  
  return (theIndex !== undefined) ? copy[theIndex] : -1;
};

// Time: 13 min
// Expected result: letterCount("Today, is the greatest day ever!") // -> "greatest"
// Actual result  : letterCount("Today, is the greatest day ever!") // -> "ever!"
// Do I know it?: Almost
// Why was it wrong?: Not sure. But it's minor.

// 4. Mean Mode (Difficulty ****)
take the array of numbers stored in arr and return 1 if the mode equals the mean, 0 if they don`t equal each
other (ie. [5, 3, 3, 3, 1] should return 1 because the mode (3) equals the mean (3)). The array will not be 
empty, will only contain positive integers, and will not contain more than one mode. 
==============================================================================================================
function MeanMode(arr) {
  var modeCount = {};
  var mode;
  var mean;
  var sum = 0;
  var count = 0;
  
  for ( var i = 0; i < arr.length; i++ ) {
    sum += arr[i];
    modeCount[arr[i]] = modeCount[arr[i]] || 0;
    modeCount[arr[i]] += 1;          //adding for the count of the number
  }
  mean = sum/arr.length;
  for( var key in modeCount ){
    if( modeCount[key] > count){     //**check the number of times a number has been seen
      mode = parseInt(key);          //if its a new highest, convert the key back into a number and set it as the current mode
      count = modeCount[key];        //set a new high count
    }
  }

  return mode === mean ? 1 : 0;      //check to see if the mode and mean are equal
}

// Time: 9 min
// Expected result: 1
// Actual result  : 0
// Do I know it?: No.
// Why was it wrong?: Finding meand and mode doesn't need to be a function.

// 5. Off Line Minimum (Difficulty ****)
take the strArr parameter being passed which will be an array of integers ranging from 1...n and the letter
"E" and return the correct subset based on the following rules. The input will be in the following format: 
["I","I","E","I",...,"E",...,"I"] where the I`s stand for integers and the E means take out the smallest
integer currently in the whole set. When finished, your program should return that new set with integers
separated by commas. For example: if strArr is ["5","4","6","E","1","7","E","E","3","2"] then your program
should return 4,1,5.
==============================================================================================================
var offLineMinimum = function(array) {
	var result = [];
	var currentArray; // will be used for each iteration to find the lowest number (copy) all elem left to E

	for (var i = 0; i < array.length; i++) {
		if (array[i] === 'E') {
			currentArray = array.slice(0, i); // copy for current set
			result.push(currentArray.sort(function(a, b){ return a - b; })[0]);
			array.splice(i, 1); // delete 'E'
			array.splice(array.indexOf(result[result.length - 1]), 1); // delete the number
			i = i - 2; // correct i for future iterations
		}
	}

	return result.join(); // ',' will be used for default
};

// Time : 10 min
// Expected result: "4,1,5"
// Actual result  : "4,1,5"
// Do I know it?: Yes
// Why was it wrong?: It was correct

Underscore.js

// 6. Each (Noteworthy *****)
Iterates over a list of elements, yielding each in turn to an iteratee function. The iteratee is bound to the
context object, if one is passed. Each invocation of iteratee is called with three arguments:
(element, index, list). If list is a JavaScript object, iteratee`s arguments will be (value, key, list).
==============================================================================================================
var each = function(list, iteratee) {
	if (Array.isArray(list)) { // list is array
		for (var i = 0; i < list.length; i++) {
			iteratee(list[i], i, list);
		}
	} else if (list.constructor === Object) { // list is object
		for (var key in list) {
			iteratee(list[key], key, list);
		}
	}
};

// Time: 3 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes but it's so important I will do it again.
// Why was it wrong?: It was correct.

// 7. Reduce (Difficulty *****)
reduce boils down a list of values into a single value. Memo is the initial state of the reduction, and each
successive step of it should be returned by iteratee. The iteratee is passed four arguments: the memo, then
the value and index (or key) of the iteration, and finally a reference to the entire list.

If no memo is passed to the initial invocation of reduce, the iteratee is not invoked on the first element
of the list. The first element is instead passed as the memo in the invocation of the iteratee on the next 
element in the list.
==============================================================================================================
var reduce = function(list, iteratee, memo) {
	var isMemo = memo; // check for memo's existence
	each(list, function(elem, i){	// loop over elements in the array
		if (!isMemo) { // memo not provided: set memo
			isMemo = true; // memo is now provided
			memo = elem; // set memo equals elem (which is the first value)
		} else { // memo provided
			memo = iteratee(memo, elem, i, list); //1st iteration when memo is initially provided, otherwise 2nd.
		}
	});

	return memo;
};

// Time: 15 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes but I will do it again for a review.
// Why was it wrong?: It was correct.

// My note: when including parameters inside each, it should also be defined in as its own parameters.
For example i. Also, always watch the name of original parameters for a function. I.e. list should be list
all the way, it should not be named array or collection. Silly but important to note.

// 7.5 Map
==============================================================================================================
var map = function(list, iteratee) {
	var result = [];
	
	each(list, function(elem, i){
		result.push(iteratee(elem, i, list));
	});
	
	return result;
};

// Time: 2 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 8. Find (Difficulty ****)
Looks through each value in the list, returning the first one that passes a truth test (predicate), or
undefined if no value passes the test. The function returns as soon as it finds an acceptable element, and
doesn`t traverse the entire list.
==============================================================================================================
var find = function(list, predicate) {
	var result;

	if (Array.isArray(list)) { // list is array
		for (var i = 0; i < list.length; i++) {
			if (predicate(list[i])) {
				return list[i];
			}
		}
	} else if (list.constructor === Object) { // list is object
		for (var key in list) {
			if (predicate(list[key])) {
				return list[key];
			}
		}
	}

	return result;
};

// Time: 2 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: If this is implemented using `each` either `each` itself needs to be modified or
// each should be returned. Otherwise, breaking out of `each` is not possible.

A potential problem of implementing `find` with `each` is that return elem applies to the anonymous callback,
not the find function. In other words, what each returns, is not stored anywhere.

// 9. Invoke (Difficulty ****)
Calls the method named by methodName on each value in the list. Any extra arguments passed to invoke will be
forwarded on to the method invocation.
==============================================================================================================
var invoke = function(list, methodName) {
	var result = [];
	
	_.each(list, function(elem){
		result.push(elem[methodName].call(elem));
	});

	return result;
};

// Time:
// Expected result: 
// Actual result  :
// Do I know it?: No
// Why was it wrong?: I don't think this should be covered in the interview.

// 10. Pluck (Difficulty *****)
A convenient version of what is perhaps the most common use-case for map: extracting a list of property values.
==============================================================================================================
var pluck = function(list, propertyName) {
	return _.map(list, function(elem){
		return elem[propertyName];
	});
};

// Time: 4 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: No.
// Why was it wrong?: I used each, where I should have used map.

// 11. Flatten (Difficulty *****)
Flattens a nested array (the nesting can be to any depth). If you pass shallow, the array will only be flattened
a single level.
==============================================================================================================
var flatten = function flatten(array, shallow) {
	
	if (shallow === true) {
		return _.reduce(array, function(memo, elem){ return memo.concat(elem); }, []);
	}

	if (!(_.some(array, function(e){ return Array.isArray(e); }))) {
		return array;
	} else {
		return flatten(_.reduce(array, function(memo, elem){ return memo.concat(elem); }, []));
	}

};

// Time: 11 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 12. Range (Difficulty *****)
A function to create flexibly-numbered lists of integers, handy for each and map loops. start, if omitted,
defaults to 0; step defaults to 1. Returns a list of integers from start (inclusive) to stop (exclusive),
incremented (or decremented) by step, exclusive. Note that ranges that stop before they start are considered
to be zero-length instead of negative — if you`d like a negative range, use a negative step.
==============================================================================================================
var range = function(args) {
	var start;
	var stop;
	var step;
	var result = [];

	if (arguments.length === 1) {
		start = 0;
		stop = arguments[0];
		step = 1;
	} else if (arguments.length === 2) {
		if (start > stop) {
			return result;
		} else {
			start = arguments[0];
			stop = arguments[1];
			step = 1;
		}
	} else if (arguments.length === 3) {
		if (start > stop) {
			return result;
		} else {
			start = arguments[0];
			stop = arguments[1];
			step = arguments[2];
		}
	}

	for (var i = start; i < stop; i += step) {
		result.push(i);
	}

	return result;
};

// Time: 8 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 13. Once (Difficulty ****)
Creates a version of the function that can only be called one time. Repeated calls to the modified function
will have no effect, returning the value from the original call. Useful for initialization functions, instead
of having to set a boolean flag and then check it later.
==============================================================================================================
var once = function(func) {
	var called = false;
	return function(){
		if (!called) {
			called = true;
			return func();
		} else {
			return false;
		}
	};
};

// Time: 1 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 14. Compose (Difficulty *****)
Returns the composition of a list of functions, where each function consumes the return value of the function
that follows. In math terms, composing the functions f(), g(), and h() produces f(g(h())).
==============================================================================================================
var compose = function(f, g, h) {
	return function(x){
		return f(g(h(x)));
	};
};

// Time: 1 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

Codewars

// 15. Letter Capitalize (Difficulty ****)
Have the function letterCapitalize(str) take the str parameter being passed and capitalize the first letter of
each word. Words will be separated by only one space.
==============================================================================================================
var letterCapitalize = function(str) {
	var words = str.split(' ');

	for (var i = 0; i < words.length; i++) {
		words[i] = words[i].split('');
		words[i][0] = words[i][0].toUpperCase();
		words[i] = words[i].join('');
	}

	return words.join(' ');
};

// Time: 5 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 16. WeIrD StRiNg CaSe (6 kyu) (Noteworthy ******)
accepts a string, and returns the same string with all even indexed characters in each word upper cased, and 
all odd indexed characters in each word lower cased. The indexing just explained is zero based, so the zero-ith 
index is even, therefore that character should be upper cased.

The passed in string will only consist of alphabetical characters and spaces(' '). Spaces will only be present
if there are multiple words. Words will be separated by a single space(' ').

Examples:
toWeirdCase( "String" );//=> returns "StRiNg"
toWeirdCase( "Weird string case" );//=> returns "WeIrD StRiNg CaSe"
==============================================================================================================
var toWeirdCase = function(str) {
	var words = str.split(' ');

	for (var i = 0; i < words.length; i++) {
		words[i] = words[i].split('');
		for (var j = 0; j < words[i].length; j++) {
			if (j % 2 !== 0) {
				words[i][j] = words[i][j].toUpperCase();
			}
		}
		words[i] = words[i].join('');
	}

	return words.join(' ');
};

// Time: 4 min
// Expected result: toWeirdCase( "Weird string case" );//=> returns "WeIrD StRiNg CaSe"
// Actual result  : toWeirdCase( "Weird string case" );//=> returns "WeIrD StRiNg CaSe"
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 17. Is Prime (6 kyu) (Noteworthy *****)
Define a function isPrime that takes one integer argument and returns true or false depending on if the integer
is a prime. A prime number(or a prime) is a natural number greater than 1 that has no positive divisor other
than 1 and itself.
==============================================================================================================
var isPrime = function(n) {
	for (var i = 2; i < n; i++) {
		if (n % i === 0) {
			return false;
		}
	}
	return n >= 2;
};

// Time: 1 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 18. Prime Time (5 kyu) (Noteworthy ******)
Write a method that takes a maximum bound and returns all primes starting with 0 up-to and including the
maximum bound.

For example:

prime(11); 
Should return an array that looks like this:
[2, 3, 5, 7, 11]
==============================================================================================================
var primeTime = function(n) {
	var isPrime = function(n) {
		for (var i = 2; i < n; i++) {
			if (n % i === 0) { // Be super careful not to confuse with n % 2
				return false;
			}
		}
		return n >= 2;
	};

	var result = [];

	for (var i = 0; i <= n; i++) {
		if (isPrime(i)) {
			result.push(i);
		}
	}

	return result;
};

// Time: 2 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

Eloquent Javascript

// 19. Chess board (Difficulty ****)
Write a program that creates a string that represents an 8×8 grid, using newline characters to separate lines.
At each position of the grid there is either a space or a “#” character. The characters should form a chess
board.

Passing this string to console.log should show something like this:

 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
==============================================================================================================
var drawChessBoard = function(x, y) {
	var oddRow = '';
	var evenRow = '';
	var result = '';

	for (var i = 1; i <= x; i++) { // make rows
		if (i % 2 === 0) {
			oddRow += ' ';
			evenRow += '#';
		} else {
			oddRow += '#';
			evenRow += ' ';
		}
	}

	for (var j = 1; j <= y; j++) { // draw rows
		if (j % 2 === 0) {
			result += evenRow + '\n';
		} else {
			result += oddRow + '\n';
		}
	}

	return result;
};

// Time: 6 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 20. A List (Difficulty *******)
var list = {
  value: 1,
  rest: {
    value: 2,
    rest: {
      value: 3,
      rest: null
    }
  }
};
var list = { value: 1, rest: { value: 2, rest: { value: 3, rest: null } } };

Write a function arrayToList that builds up a data structure like the previous one when given [1, 2, 3] as
argument, and write a listToArray function that produces an array from a list. Also write the helper functions
prepend, which takes an element and a list and creates a new list that adds the element to the front of the
input list, and nth, which takes a list and a number and returns the element at the given position in the list,
or undefined when there is no such element.
==============================================================================================================
var arrayToList = function(array) {
	var rest = null;
	for (var i = array.length - 1; i >= 0; i--) {
		rest = {value: array[i], rest: rest}
	}
	return rest;
};

// Time: 4 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct. But It's really confusing I need to review it.

// 21. Deep comparison (Difficulty *******)
Write a function, deepEqual, that takes two values and returns true only if they are the same value or are
objects with the same properties whose values are also equal when compared with a recursive call to deepEqual.
==============================================================================================================
function deepEqual(a, b) {
  if (a === b) return true; // short-circuiting
  
  if (a == null || typeof a != "object" || // checking validity of a
      b == null || typeof b != "object")	 // checking validity of b
    return false;
  
  var propsInA = 0, propsInB = 0; // counters

  for (var prop in a)
    propsInA += 1; // counting properties

  for (var prop in b) {
    propsInB += 1; // counting properties
    if (!(prop in a) || !deepEqual(a[prop], b[prop])) // if the property is false or props are not equal,
      return false;
  }

  return propsInA == propsInB; // finally checking no. of props
}

// Time:
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: No
// Why was it wrong?: I don't think this will be covered.

// 22. Mother-child age difference (Difficulty ******)
Using the example data set from this chapter, compute the average age difference between mothers and children
(the age of the mother when the child is born).

ancestry = [
{
	"name"	: "Carolus Haverbeke",
	"sex"		: "m",
	"born"	: 1832,
	"died"	: 1905,
	"father": "Carel Haverbeke",
	"mother": "Maria van Brussel"
}, 
...];

function average(array) {
  function plus(a, b) { return a + b; }
  return array.reduce(plus) / array.length;
}

var byName = {};
ancestry.forEach(function(person) {
  byName[person.name] = person;
});

==============================================================================================================
var differences = ancestry.filter(function(person){
	return byName[person.mother] != null; // What we're passing is a predicate. Valid elem will be pushed.
}).map(function(person){
	return person.born - byName[person.mother].born; // This is correct.
});

console.log(average(differences)); // → 31.2

// Time: 6 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: No
// Why was it wrong?: Because I used `filter` as if I was using `each`. `filter` is actually very similar to `map`.

// 23. Historical life expectancy (Difficulty *******)
Compute and output the average age of the people in the ancestry data set per century. A person is assigned
to a century by taking their year of death, dividing it by 100, and rounding it up, as in
Math.ceil(person.died / 100).

function average(array) {
  function plus(a, b) { return a + b; }
  return array.reduce(plus) / array.length;
}
==============================================================================================================
var groupBy = function(array, groupOf) {
	var groups = {};
	array.forEach(function(element){
		var groupName = groupOf(element); // set group name
		if (groupName in groups) { // check if the group name exists in the group
			groups[groupName].push(element);
		} else {
			groups[groupName] = [element];
		}
	});
	return groups;
};

var byCentury = groupBy(ancestry, function(person){ // grouping person objects in each array by century
	return Math.ceil(person.died / 100);
});

for (var century in byCentury) {
	var ages = byCentury[century].map(function(person){ // mapping ages to an age variable.
		return person.died - person.born; // computing and mapping age over person objects.
	});
	console.log(century + ": " + average(ages)); // logging average age for each century in byCentury object.
}

// Time: null
// Expected result: n/a 
// Actual result  : n/a
// Do I know it?: No
// Why was it wrong?: It's just hard.

JS Fundamentals

// 24. Write a function called partial that mimics this (Difficulty *****)
var fullName = function ( firstName, lastName ) {
  return firstName + ' ' + lastName;
};

var partial;

var billName = partial( fullName, 'Bill' );

billName( 'Smith' ); // "Bill Smith"
billName( 'Clinton' ); // "Bill Clinton"
==============================================================================================================
var partial = function(func, arg1) {
	return function(arg2) {
		return func(arg1, arg2);
	};
};

var billName = partial(fullName, 'Bill');

billName('Clinton');

// Time: 6 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 25. Write a function that will merge the first object into the second object, using _.each. If the property 
// already exists, on the second object, do not overwrite it. (Noteworthy *****)
==============================================================================================================
var firstObj = {"a": 10, "b": 11, "c": 12, "d": 13, "e": 14};
var secondObj = {"a": 1, "b": 2, "c": 3};

var merge = function(obj1, obj2) {
	var result = {};

	for (var key in obj2) {			// needs to do it separately
		result[key] = obj2[key];
	}

	for (var key in obj1) {
		if (!(key in obj2)) {
			result[key] = obj1[key];
		}
	}

	return result;
};

// Time: 2 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.


// 26. Merge (Difficulty *****)
Write a function merge. merge should take two arrays and a callback, iterating both elements with the same
index and map into a new array for result.
var x = merge([1, 2, 3, 4], [5, 6, 7, 8], function(a, b){  
  return a + b;
});
//x should now equal [6, 8, 10, 12].

Write a function called 'euclid'
var euclid = function(coords1, coords2){  
  //Your code here.
  //You should not use any loops and should
  //instead use your original merge function.
}
var x = euclid([1.2, 3.67], [2.0, 4.4]);
//x should now equal approximately 1.08.
==============================================================================================================
var merge = function(array1, array2, callback) {
	var result = [];
	for (var i = 0; i < array1.length; i++) {
		result.push(callback(array1[i], array2[i]));
	}
	return result;
};

var euclid = function(array1, array2) {
	var coord = merge(array1, array2, function(a, b){
		return a - b;
	});
	return Math.sqrt( Math.pow(coord[0], 2) + Math.pow(coord[1], 2) );
};

// Time: 4 min
// Expected result: 1.08
// Actual result  : 1.08
// Do I know it?: Yes
// Why was it wrong?: It was correct.

// 27. [EXTRA CREDIT] Why doesn`t the code below work? This is a function that should return an array of
functions that console.log() each person`s name as a string when invoked. Fiddle with this function and inspect
how it works, then try to fix it using a closure. Be prepared to explain to a partner how it worked before, and
how it works now with a closure. (Noteworthy ******)
var checkAttendanceFunc = function(nameArr){
  var resultArr = [];
  for(var i = 0; i < nameArr.length; i++){
    resultArr.push(function(){ console.log('Is', nameArr[i], 'present?', i)});
  };
  return resultArr;
};
==============================================================================================================
var checkAttendanceFunc = function(nameArr){
  var resultArr = [];
  
  var callback = function(nameArr){
  	console.log('Is', nameArr[i], 'present?', i);
  	return 'Is ' + nameArr[i] + ' present? ' + i;
  };
  
  for(var i = 0; i < nameArr.length; i++){
    resultArr.push(callback(nameArr)); // callback should be passed an argument it should also return value
  };
  return resultArr;
};

// Time: 2 min
// Expected result: n/a 
// Actual result  : n/a
// Do I know it?: Yes, but it's hard to explain.
// Why was it wrong?: It was correct.

// 28. Rewrite checkValue using _.each. Make sure that you have underscore.js included where you are running
your code. checkValue looks for a target value from an array and returns true immediately after it finds the value.
==============================================================================================================
var checkValue = function(array, value) {
	var result = false;

	_.each(array, function(elem){
		if (!result && elem === value) {
			result = true;
		}
	});

	return result;
};

// Time: 6 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: Yes
// Why was it wrong?: It was correct.

Functional Programming in Javascript

// 29. Retrieve id, title, and a 150x200 box art url for every video (Difficulty ******) Create a query that
selects {id, title, boxart} for every video in the MovieLists.
==============================================================================================================
Array.prototype.concatAll = function() {
	var results = [];
	this.forEach(function(subArray) {
    subArray.forEach(function(element){
    	results.push(element);
    });
  });
	return results;
};

var movieLists = [
			{
				name: "Instant Queue",
				videos : [
					{
						"id": 70111470,
						"title": "Die Hard",
						"boxarts": [
							{ width: 150, height:200, url:"http://cdn-0.nflximg.com/images/2891/DieHard150.jpg" },
							{ width: 200, height:200, url:"http://cdn-0.nflximg.com/images/2891/DieHard200.jpg" }
						],
						"url": "http://api.netflix.com/catalog/titles/movies/70111470",
						"rating": 4.0,
						"bookmark": []
					},
					{
						"id": 654356453,
						"title": "Bad Boys",
						"boxarts": [
							{ width: 200, height:200, url:"http://cdn-0.nflximg.com/images/2891/BadBoys200.jpg" },
							{ width: 150, height:200, url:"http://cdn-0.nflximg.com/images/2891/BadBoys150.jpg" }

						],
						"url": "http://api.netflix.com/catalog/titles/movies/70111470",
						"rating": 5.0,
						"bookmark": [{ id:432534, time:65876586 }]
					}
				]
			}
		];

var boxArts = function(array) {
	
return movieLists.map(function(movieList) { // selecting videos arrays of each movieList object
	return movieList.videos.map(function(video) { // selecting boxarts arrays of each video array 
		return video.boxarts.filter(function(boxart) { // filtering element of boxarts array
			return boxart.width === 150; // end of selecting
		  	}).map(function(boxart) { // saving as an abject format
			return {id: video.id, title: video.title, boxart: boxart.url};
	  });
  }).concatAll(); // concat third and second level arrays
}).concatAll(); 	// concat second and first level arrays

};

// Time: 15 min
// Expected result: n/a
// Actual result  : n/a
// Do I know it?: No
// Why was it wrong?: Misuse of filter.

Advanced JS

// 30. Different ways of changing the context: (Noteworthy *****)
==============================================================================================================
function add(a, b){ 
  return a + b; 
} 
assert( add.call(this, 1, 2) == 3, ".call() takes individual arguments" ); 
assert( add.apply(this, [1, 2]) == 3, ".apply() takes an array of arguments" );

// Time:
// Expected result: n/a
// Actual result  : n/a
// Do I know it?:
// Why was it wrong?:

// 31. QUIZ: How can we implement looping with a callback? (Noteworthy *******)
==============================================================================================================
function loop(array, fn){ 
  for ( var i = 0; i < array.length; i++ ) 
    fn.call( array, array[i]); 
} 
var num = 0; 
loop([0, 1, 2], function(value){ 
  assert(value == num++, "Make sure the contents are as we expect it."); 
  assert(this instanceof Array, "The context should be the full array."); 
});

// Time:
// Expected result: n/a
// Actual result  : n/a
// Do I know it?:
// Why was it wrong?:
